#include "encoding.h"
#include "core.h"
#include "spi.h"
#include "sdcard.h"
#include <stdio.h>

#include "uart.h"

#define SPIF_MASK 0x80

uint8_t SPI_Transfer(uint8_t data)
{
   *IO_SPIRXTX = data;
   while(!((*IO_SPIRXTX) & SPIF_MASK)) { }
   return *IO_SPIRXTX;
}

uint8_t SD_ReadRes1()
{
   uint8_t i = 0, res1;
   while ((res1=SPI_Transfer(0xFF)) == 0xFF)
   {
      ++i;
      if (i>8) break;
   }

   return res1;
}

void SD_ReadRes7(uint8_t *res)
{
   // read response 1 in R7
   res[0] = SD_ReadRes1();

    // If error reading R1, return
   if(res[0] > 1)
   {
      res[1] = 0;
      res[2] = 0;
      res[3] = 0;
      res[4] = 0;
      return;
   }

   // Read remaining bytes
   res[1] = SPI_Transfer(0xFF);
   res[2] = SPI_Transfer(0xFF);
   res[3] = SPI_Transfer(0xFF);
   res[4] = SPI_Transfer(0xFF);
}

static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    uint8_t d = data[i];
    for (uint8_t j = 0; j < 8; j++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) {
        crc ^= 0x09;
      }
      d <<= 1;
    }
  }
  return (crc << 1) | 1;
}

void SDCmd(const SDCardCommand cmd, uint32_t args)
{
   uint8_t buf[8];

   buf[0] = SPI_CMD(cmd);
   buf[1] = (uint8_t)((args&0xFF000000)>>24);
   buf[2] = (uint8_t)((args&0x00FF0000)>>16);
   buf[3] = (uint8_t)((args&0x0000FF00)>>8);
   buf[4] = (uint8_t)(args&0x000000FF);
   buf[5] = CRC7(buf, 5);

   for (uint32_t i=0;i<6;++i)
      SPI_Transfer(buf[i]);
}

uint8_t SDIdle()
{
   uint32_t oldmie = swap_csr(mie, 0);
   SDCmd(CMD0_GO_IDLE_STATE, 0);
   uint8_t response = SD_ReadRes1(); // Expected: 0x01
   set_csr(mie, oldmie);

   EchoUART("SDIdle():"); EchoHex(response); EchoUART("\n");

   return response;
}

uint8_t SDCheckVoltageRange(uint32_t *databack)
{
   uint32_t oldmie = swap_csr(mie, 0);

   SDCmd(CMD8_SEND_IF_COND, 0x000001AA);

   uint8_t res[5];
   SD_ReadRes7(res); // Expected: 0x01(version 2 SDCARD) or 0x05(version 1 or MMC card) + 000001AA

   EchoUART("SDCheckVoltageRange-1():"); EchoHex(res[0]); EchoUART("\n");

   *databack = (res[1]<<24) | (res[2]<<16) | (res[3]<<8) | res[4];

   EchoUART("SDCheckVoltageRange-2():"); EchoHex(*databack); EchoUART("\n");

   set_csr(mie, oldmie);

   return res[0];
}

uint8_t SDCardInit()
{
   uint32_t oldmie = swap_csr(mie, 0);

   // ACMD header
   SDCmd(CMD55_APP_CMD, 0x00000000);

   uint8_t response = SD_ReadRes1(); // Expected: 0x00?? - NOTE: Won't handle old cards!

   EchoUART("SDCardInit-1():"); EchoHex(response); EchoUART("\n");

   // Set high capacity mode on
   SDCmd(ACMD41_SD_SEND_OP_COND, 0x40000000);

   response = SD_ReadRes1(); // Expected: 0x00 eventually, but will also get several 0x01 (idle)

   EchoUART("SDCardInit-2():"); EchoHex(response); EchoUART("\n");

   set_csr(mie, oldmie);

   return response;
}

uint8_t SDSetBlockSize512()
{
   uint32_t oldmie = swap_csr(mie, 0);

   // Set block length
   SDCmd(CMD16_SET_BLOCKLEN, 0x00000200);

   uint8_t response = SD_ReadRes1(); // Expected: 0x00

   EchoUART("SDSetBlockSize512():"); EchoHex(response); EchoUART("\n");

   set_csr(mie, oldmie);

   return response;
}

uint8_t SDReadSingleBlock(uint32_t sector, uint8_t *datablock, uint8_t checksum[2])
{
   uint32_t oldmie = swap_csr(mie, 0);

   // Read single block
   // NOTE: sector<<9 for non SDHC cards
   SDCmd(CMD17_READ_SINGLE_BLOCK, sector);

   uint8_t response = SD_ReadRes1(); // Expected: 0x00

   EchoUART("SDReadSingleBlock-1():"); EchoHex(response); EchoUART("\n");

   if (response != 0xFF) // == 0x00
   {
      response = SD_ReadRes1(); // Expected: 0xFE

      EchoUART("SDReadSingleBlock-2():"); EchoHex(response); EchoUART("\n");

      if (response == 0xFE)
      {
         // Data burst follows
         // 512 bytes of data followed by 16 bit CRC, total of 514 bytes
         int x=0;
         do {
            datablock[x++] = SPI_Transfer(0xFF);
         } while(x<512);

         // Checksum
         checksum[0] = SPI_Transfer(0xFF);
         checksum[1] = SPI_Transfer(0xFF);
      }
   }

	set_csr(mie, oldmie);
 
   return response;
}

int SDReadMultipleBlocks(uint8_t *datablock, uint32_t numblocks, uint32_t blockaddress)
{
   if (numblocks == 0)
      return -1;

   uint32_t cursor = 0;

   uint8_t tmp[512];
   uint8_t checksum[2];

   for(uint32_t b=0; b<numblocks; ++b)
   {
      uint8_t response = SDReadSingleBlock(b+blockaddress, tmp, checksum);
      if (response != 0xFE)
         return -1;
      __builtin_memcpy(datablock+cursor, tmp, 512);
      cursor += 512;
   }

   return cursor;
}

int SDCardStartup()
{
   int k=0;

   if (SDIdle() != 0x01)
      return -1;

   uint32_t databack;
   if (SDCheckVoltageRange(&databack) != 0x01)
      return -1;

   uint8_t response = SDCardInit();
   if (response == 0x00) // OK
      return 0;

   if (response != 0x01) // 0x05, older card, bail out
      return -1;
   
   // Keep looping until we get a 0x0
   while (response == 0x01) // Loop again if it's 0x01
   {
      response = SDCardInit();
      k=k^0xFF;
   } // Repeat this until we receive a non-idle (0x00)

   // NOTE: Block size is already set to 512 for high speed and can't be changed
   //response[3] = SDSetBlockSize512();
   //EchoUART("SDSetBlockSize512()");

   return response == 0x00 ? 0 : -1;
}
