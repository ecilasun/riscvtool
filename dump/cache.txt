				// Check to see if we're going outside cache page
				// There are 20'h00000-20'hFFFFF pages in DDR3 space
				// Page size is 256bytes (or 64DWORDs)
				// This adds up to the 20+(6+2)=28bit address space of DDR3
				// For our cache memory, we'll store 128 frames (of 64DWORDs each)
				// This will take up 32Kbytes from the upper section of
				// Fast RAM
				// pages      = 0x100000 (1048576 x linesize groups)
				// tags       = 0x2000 (pages/cachelines-> 0..8191 columns)
				// cachelines = 0x80 (128 x linesize entries)
				// linesize   = 0x40 (64 x DWORD entries)
				//if (cachepage != PC[27:8]) begin
					// page=20bits
					// offset=6bits (because we have DWORDs)
					// cache offset will be: 7bits for 128 frames + 6bits for DWORD offset, 13bits
					// this layout yields 8192 blocks (0x100000/pagecount(128)==8192), 13bit tags (0..8191)

					// Instruction cache (I$) tags
					// logic [12:0] instructioncachetags[0:127];

					// Offset= memaddress[7:2]; // 0..63 (which DWORD in page)
					// Page = memaddress[27:8]; // 0x00000..0xFFFFF (which 64DWORD page in memory)
					// Cacheline = memaddress[21:15]; // 0..127
					// Tag = memaddress[27:15]; // page/128 -> 0..8191 (which row of 0..127 memory page groups)

				//end else begin



				if  (fmulresultvalid | fdivresultvalid | fi2fresultvalid | fui2fresultvalid | ff2iresultvalid | ff2uiresultvalid | faddresultvalid | fsubresultvalid | fsqrtresultvalid | feqresultvalid | fltresultvalid | fleresultvalid) begin

wire deviceBRAM					= (busaddress[31:28]==4'b0000) & (busaddress < 32'h00040000) ? 1'b1 : 1'b0;		// 0x00000000 - 0x0003FFFF
wire deviceDDR3					= (busaddress[31:28]==4'b0000) & (busaddress >= 32'h00040000) ? 1'b1 : 1'b0;	// 0x00040000 - 0x0FFFFFFF
wire deviceAudioWrite			= {busaddress[31:28], busaddress[5:2]} == 8'b10001000 ? 1'b1 : 1'b0;			// 0x8xxxxx20 Audio output port
wire deviceSwitchCountRead		= {busaddress[31:28], busaddress[5:2]} == 8'b10000111 ? 1'b1 : 1'b0;			// 0x8xxxxx1C Switch incoming queue byte count
wire deviceSwitchRead			= {busaddress[31:28], busaddress[5:2]} == 8'b10000110 ? 1'b1 : 1'b0;			// 0x8xxxxx18 Device switch states
wire deviceSPIWrite				= {busaddress[31:28], busaddress[5:2]} == 8'b10000101 ? 1'b1 : 1'b0;			// 0x8xxxxx14 SPI interface to SDCart write port
wire deviceSPIRead				= {busaddress[31:28], busaddress[5:2]} == 8'b10000100 ? 1'b1 : 1'b0;			// 0x8xxxxx10 SPI interface to SDCard read port
wire deviceUARTTxWrite			= {busaddress[31:28], busaddress[5:2]} == 8'b10000011 ? 1'b1 : 1'b0;			// 0x8xxxxx0C UART write port
wire deviceUARTRxRead			= {busaddress[31:28], busaddress[5:2]} == 8'b10000010 ? 1'b1 : 1'b0;			// 0x8xxxxx08 UART read port
wire deviceUARTByteCountRead	= {busaddress[31:28], busaddress[5:2]} == 8'b10000001 ? 1'b1 : 1'b0;			// 0x8xxxxx04 UART incoming queue byte count
wire deviceGPUFIFOWrite			= {busaddress[31:28], busaddress[5:2]} == 8'b10000000 ? 1'b1 : 1'b0;			// 0x8xxxxx00 GPU command queue
